package javamain;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main {
	static FastScanner in = new FastScanner();
	static PrintWriter out = new PrintWriter(System.out);
	public static void main(String[] args) {
		
		//////////////////////////////////////////////
		int t;
		t = in.nextInt();
		for (int i = 1; i <= t; i++) {
			solve(t);
		} 
		//////////////////////////////////////////////
		out.close();
	}
	static ArrayList<Integer> generateNthrowPascal(int N)
	{
	 
	    // nC0 = 1
	    int prev = 1;
	    ArrayList<Integer> arrayList = new ArrayList<Integer>();
	    arrayList.add(prev);
	     
	    for(int i = 1; i <= N; i++)
	    {
	       int curr = (prev * (N - i + 1)) / i;
	       arrayList.add(curr);
	       prev = curr;
	    }
	}
	
	private static void solve(int t) {
		int n = in.nextInt();
		String str = in.next();
		int ans = KMPSearch("map", str);
		ans+= KMPSearch("pie", str);
		int minus = 0;
		if(str.contains("mapie")) {
			minus = KMPSearch("mapie", str);
		}
		out.println(ans-minus);
	}
	static int KMPSearch(String pat, String txt)
    {
        int M = pat.length();
        int N = txt.length();
 
        int lps[] = new int[M];
        int j = 0; // index for pat[]

        computeLPSArray(pat, M, lps);
 
        int i = 0;
        int res = 0;
        int next_i = 0;
 
        while (i < N) {
            if (pat.charAt(j) == txt.charAt(i)) {
                j++;
                i++;
            }
            if (j == M) {
                j = lps[j - 1];
                res++;
 
                if (lps[j] != 0)
                    i = ++next_i;
                j = 0;
            }
 

            else if (i < N
                     && pat.charAt(j) != txt.charAt(i)) {

                if (j != 0)
                    j = lps[j - 1];
                else
                    i = i + 1;
            }
        }
        return res;
    }
 
    static void computeLPSArray(String pat, int M, int lps[])
    {
        int len = 0;
        int i = 1;
        lps[0] = 0; 
 
        while (i < M) {
            if (pat.charAt(i) == pat.charAt(len)) {
                len++;
                lps[i] = len;
                i++;
            }
            else
            {

                if (len != 0) {
                    len = lps[len - 1];

                }
                else // if (len == 0)
                {
                    lps[i] = len;
                    i++;
                }
            }
        }
    }


	static final int mod = 1_000_000_007;
	
	static ArrayList<Integer> Sieve(int N) {
        ArrayList<Integer> primes = new ArrayList<>();
        if (N <= 1) {
            return primes;
        }
        // 0 means true/ prime; 1 means not prime;
        int[] markArray = new int[N + 1];
        // making 0, 1 and all even numbers as 1(not prime)
        markArray[0] = 1;
        markArray[1] = 1;
        for (int i = 4; i <= N; i += 2) {
            markArray[i] = 1;
        }
        // adding 2 as a prime number
        primes.add(2);

        int limit = (int) Math.sqrt((double) N) + 1;
        for (int i = 3; i <= N; i += 2) {
            if (markArray[i] == 0) {
                primes.add(i);
            }
            if (i <= limit) {
                for (int j = i * i; j <= N; j += i * 2) {
                    markArray[j] = 1;
                }
            }
        }
        return primes;
    }
	
	static class FastScanner {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer("");
 
		String next() {
			while (!st.hasMoreTokens())
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			return st.nextToken();
		}
 
		int nextInt() {
			return Integer.parseInt(next());
		}
 
		int[] readArray(int n) {
			int[] a = new int[n];
			for (int i = 0; i < n; i++)
				a[i] = nextInt();
			return a;
		}
 
		long nextLong() {
			return Long.parseLong(next());
		}
	}
	
}


///Eclipse setup
// set these templates
// Preference -> Editor -> templates -> sout -> out.println(${cursor});
// Preference -> Editor -> templates -> pout -> out.print(${cursor});

/** Preference -> Editor -> templates -> mtest
 * 	int t;
	t = in.nextInt();
	for(int i =1;i<=t;i++) {
		solve(t);
	}
 * 
 * 
 * **/


